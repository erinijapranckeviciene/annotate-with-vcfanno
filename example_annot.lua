-- Lua functions to return gene level MIM, OMIM, ORPHANET, Gene description annotations
-- and variant level annotations based on variant HGVSg and HGVSc notation 
-- /Annotation tables generated by create-annotation-tables.sh/

-- Global definitions where the lua table files are located absolute paths
geneLevelAnnotationsFile  = "luatables/omim-orpha-ensg-annotations.luatable"
labVariantFrequencyFile  = "luatables/localvariants.luatable"
panelsFile  = "luatables/panels.luatable"
hgmdFile  = "luatables/hgmd.luatable"

local VEPfields={
["Gene"]=5;
["Feature"]=7;
["HGVSg"]=45;
["HGVSc"]=11
}
--########################  Functions to read Table from File and print the table ##################################

function TableFromFile(File, newT)
for line in io.lines(File) do
  for key, value in string.gmatch(line,"(.+)=(.+)") do
    newT[key]=value
  end
end  
end --TableFromFile


function PrintTable(Table)
if Table then
for i,v in pairs(Table) do
  print(i.."="..v)
end
end
end --PrintTable

-- ##################### INITIALIZE GLOBAL TABLES ####################################################
geneLevelAnnotationsTable={}
TableFromFile(geneLevelAnnotationsFile, geneLevelAnnotationsTable)
--PrintTable(geneLevelAnnotationsTable)

panelsTable={}
TableFromFile(panelsFile, panelsTable)
--PrintTable(panelsTable)

labVariantFrequencyTable={}
TableFromFile(labVariantFrequencyFile, labVariantFrequencyTable)
--PrintTable(labVariantFrequencyTable)

hgmdTable={}
TableFromFile(hgmdFile, hgmdTable)
--PrintTable(hgmdTable)

--########################  Functions to annotate fields  ##############


--######################################################################
function CSQFieldValue(CSQstring,FieldName)
-- get the VEP Field Gene
-- THIS SHOULD BE OPTIMIZED
--######################################################################
local FieldNumber=VEPfields[FieldName]
local CSQfields={}
if CSQstring then
for value in (CSQstring.."|"):gmatch("([^|]*)|") do
    table.insert(CSQfields, value)
end
-- select Gene value
if CSQfields[FieldNumber] then
    return CSQfields[FieldNumber]
end
end --CSQstring
end --CSQFieldValue


--######################################################################
function stringToTable(ID,Source)
-- Convert string in format "name1:value1|name2:value2| .. into t[name1]=value1... 
--######################################################################
local astring=Source[tostring(ID)]
if astring then
local ResultTable={}
    for avalue in (astring.."|"):gmatch("([^|]*)|") do
        local ik,jk = string.find(avalue,"^.+:")
        local iv,jv = string.find(avalue,":.+$")
        ResultTable[ string.sub(avalue,ik,jk-1)]=string.sub(avalue,iv+1,jv)
     end
return ResultTable
end
end


--######################################################################
function annotateGL(CSQ)
-- extract annotations from gene level individual fields 
--######################################################################
local GeneID=CSQFieldValue(CSQ,"Gene")
local value=geneLevelAnnotationsTable[GeneID]
    if value then
        return value
     end 
end

--######################################################################
function annotateLocalVariant(CSQ)
-- Variant Frequency from local data base, variant ID is HGVSg 
--######################################################################
local VariantID=CSQFieldValue(CSQ,"HGVSg")
   if VariantID then
      local value=labVariantFrequencyTable[VariantID]
      if value then 
        return value
      end
   end
end --annotateLocalVariant

--######################################################################
function annotatePanel(CSQ)
-- Assign the Panel based on the TranscriptID
--######################################################################
local TranscriptID=CSQFieldValue(CSQ,"Feature")
local fpanel=panelsTable[tostring(TranscriptID)]
   if fpanel then
      return fpanel
   end
end --annotatePanels


--######################################################################
function annotateHGMD(CSQarray,FieldName)
-- whether the NM transcript change is in HGMD 
--######################################################################
-- read the strings and check for presence in hgmd
for index,value in pairs(CSQarray) do
    local field=CSQFieldValue(value,FieldName)
    if field then
       if string.match(field,"NM_") then
           local modified=string.gsub(field,"%.%d+%:",".x:")    
           local hgmdmatch=hgmdTable[modified]
           if hgmdmatch then
              return hgmdmatch
           end
       end
    end 
end
end --annotateHGMD
